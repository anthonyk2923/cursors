package main

import (
	"encoding/json"
	"log"
	"math"
	"math/rand"
	"net/http"
	"sync"

	"github.com/google/uuid"
	"github.com/gorilla/websocket"
)

type Color struct {
	R uint8 `json:"r"`
	G uint8 `json:"g"`
	B uint8 `json:"b"`
}

type Point struct {
	X      int    `json:"x"`
	Y      int    `json:"y"`
	UserID string `json:"user_id"`
	Color  Color  `json:"color"`
}
type DVector struct {
	DX int `json:"dx"`
	DY int `json:"dy"`
}
type Bullet struct {
	ToVector DVector `json:"toVector"`
	FromId   string  `json:"fromId"`
	IsHit    Point   `json:"isHit"`
}

type Message struct {
	Type    string          `json:"type"`
	Payload json.RawMessage `json:"payload"`
}

var (
	connections = make(map[string]*websocket.Conn)
	points      = make(map[string]Point)
	mu          sync.Mutex
	radius      = 100
)

var upgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin:     func(r *http.Request) bool { return true },
}

func handler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)

	if err != nil {
		log.Println(err)
		return
	}

	userID := uuid.New().String()

	color := Color{
		R: uint8(rand.Intn(256)),
		G: uint8(rand.Intn(256)),
		B: uint8(rand.Intn(256)),
	}

	mu.Lock()
	connections[userID] = conn
	conn.WriteMessage(websocket.TextMessage, []byte(userID))
	log.Println("New connection:", userID)

	points[userID] = Point{UserID: userID, Color: color}

	existingPoints := make([]Point, 0, len(points))
	for _, p := range points {

		existingPoints = append(existingPoints, p)

	}
	data, err := json.Marshal(existingPoints)
	if err == nil {
		if err := conn.WriteMessage(websocket.TextMessage, data); err != nil {
			log.Println("Error sending initial data:", err)
		}
	} else {
		log.Println("Error encoding initial objects:", err)
	}
	mu.Unlock()

	defer func() {
		mu.Lock()
		delete(connections, userID)
		delete(points, userID)
		mu.Unlock()
		conn.Close()
		broadcastPoints()
	}()

	for {
		_, p, err := conn.ReadMessage()
		if err != nil {
			log.Println("Connection lost:", userID, err)
			return
		}

		var msg Message

		if err := json.Unmarshal(p, &msg); err != nil {
			log.Println("Error decoding JSON:", err)
			continue
		}
		switch msg.Type {
		case "p":
			var point Point
			if err := json.Unmarshal(msg.Payload, &point); err != nil {
				log.Println("Error decoding point:", err)
				continue
			}
			if point.X == 0 && point.Y == 0 {
				continue
			}

			mu.Lock()
			if existingPoint, exists := points[userID]; exists {
				point.UserID = userID
				point.Color = existingPoint.Color
			}
			points[userID] = point
			mu.Unlock()
			broadcastPoints()

		case "b":
			log.Println("--------")
			var bullet Bullet
			var d DVector
			if err := json.Unmarshal(msg.Payload, &d); err != nil {
				log.Println("Error decoding bullet direction:", err)
				continue
			}
			mu.Lock()
			bullet.FromId = userID
			bullet.ToVector = d
			log.Println("Bullet received:", bullet)

			if point, exists := points[userID]; exists {
				checkHit := checkHit(point, d, existingPoints)
				if checkHit == nil {
					log.Println("no points hit")
				} else {
					log.Println(checkHit)
					data, err := json.Marshal(checkHit)
					if err != nil {
						log.Println("Error marshaling hit point:", err)
						continue
					}
					// broadcastBullets(data)
				}

			} else {
				log.Println("No point found for userID:", userID)
			}

			mu.Unlock()

		}
	}
}
func checkHit(point Point, d DVector, cursors []Point) *Point {
	x1 := point.X
	y1 := point.Y
	log.Println(x1, y1)
	log.Println("=")
	for _, cursor := range cursors {
		if cursor.UserID != point.UserID {
			log.Print(cursor)
			cx := cursor.X
			cy := cursor.Y

			numer := math.Abs(float64(cx-x1)*float64(d.DY) - float64(cy-y1)*float64(d.DX))
			denom := math.Sqrt(float64(d.DX*d.DX + d.DY*d.DY))
			D := numer / denom

			if D <= float64(radius) {
				return &cursor
			}
		}
	}
	return nil
}
func broadcastPoints() {
	mu.Lock()
	defer mu.Unlock()

	updatedPoints := make([]Point, 0, len(points))
	for _, p := range points {

		if p.X != 0 || p.Y != 0 {
			updatedPoints = append(updatedPoints, p)
		}
	}

	data, _ := json.Marshal(updatedPoints)

	for userID, conn := range connections {
		if err := conn.WriteMessage(websocket.TextMessage, data); err != nil {
			log.Println("Error broadcasting to", userID, ":", err)
			conn.Close()
			delete(connections, userID)
			delete(points, userID)
		}
	}
}
func broadcastBullets(data []byte) {
	mu.Lock()
	defer mu.Unlock()

	for userID, conn := range connections {
		if err := conn.WriteMessage(websocket.TextMessage, data); err != nil {
			log.Println("Error broadcasting to", userID, ":", err)
			conn.Close()
			delete(connections, userID)
			delete(points, userID)
		}
	}
}

func main() {
	http.HandleFunc("/", handler)
	log.Println("Server started on :8080")
	http.ListenAndServe(":8080", nil)
}
